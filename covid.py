# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QzFnuZSKUs_YkUANhdsndfglmwSSa9HQ
"""

import requests

url = "https://api.covid19api.com/dayone/country/india/status/confirmed"
response = requests.get(url)
data = response.json()

import pandas as pd

df = pd.DataFrame(data)

# Remove irrelevant columns
df = df[['Date', 'Cases']]

# Remove null values
df.dropna(inplace=True)

# Remove duplicates
df.drop_duplicates(subset=['Date'], inplace=True)

# Convert date column to datetime format
df['Date'] = pd.to_datetime(df['Date'])

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
df[['Cases']] = scaler.fit_transform(df[['Cases']])

import seaborn as sns

# Create a line plot of cases over time
sns.lineplot(x='Date', y='Cases', data=df)

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[['Cases']], df[['Cases']], test_size=0.2, random_state=42)

# Define the model
model = LinearRegression()

# Use GridSearchCV to find the best parameters for the model
# Define the hyperparameters to tune
param_grid = {'fit_intercept': [True, False], 'positive': [True, False]}
grid_search = GridSearchCV(model, param_grid=param_grid)
grid_search.fit(X_train, y_train)

# Train the model on the full training set with the best parameters
model = grid_search.best_estimator_
model.fit(X_train, y_train)

# Test the model on the testing set
y_pred = model.predict(X_test)

import streamlit as st

# Define a function to make predictions using the model
def predict(cases):
    scaled_cases = scaler.transform([[cases]])
    predicted_cases = model.predict(scaled_cases)
    return scaler.inverse_transform(predicted_cases)[0][0]

# Create a Streamlit app
st.title("COVID-19 Predictor")
st.write("Enter the number of confirmed cases:")
cases = st.number_input("", min_value=0)
if st.button("Predict"):
    predicted_cases = predict(cases)
    st.write("Predicted number of cases:", int(predicted_cases))